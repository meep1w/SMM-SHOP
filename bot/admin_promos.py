# -*- coding: utf-8 -*-
import os
import math
import asyncio
from typing import Optional, List, Dict, Any

import httpx
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router(name="admin")

# ===== ENV =====
ADMIN_IDS = {
    int(x) for x in (os.getenv("ADMIN_IDS", "").replace(" ", "").split(","))
    if x.isdigit()
}
API_BASE = os.getenv("API_BASE", "http://127.0.0.1:8011").rstrip("/")
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")

if not ADMIN_IDS:
    print("[admin] WARNING: ADMIN_IDS is empty ‚Äì /admin –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# ===== helpers common =====
def _admin_only(m: types.Message | types.CallbackQuery) -> bool:
    user = m.from_user if isinstance(m, (types.Message, types.CallbackQuery)) else None
    return bool(user and user.id in ADMIN_IDS)

def api_url(path: str) -> str:
    base = API_BASE.rstrip("/")
    p = path.lstrip("/")
    if not base.endswith("/api/v1"):
        p = "api/v1/" + p
    return f"{base}/{p}"

def _auth_headers() -> Dict[str, str]:
    return {
        "Authorization": f"Bearer {ADMIN_TOKEN}",
        "Content-Type": "application/json",
    }

# =========================
# ====== –ü–†–û–ú–û–ö–û–î–´ ========
# =========================
class PromoWizard(StatesGroup):
    type = State()
    code = State()
    value = State()
    max_activations = State()
    per_user_limit = State()

def _kb_promo_types():
    kb = [
        [types.InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ % (–Ω–∞ –∑–∞–∫–∞–∑)", callback_data="promo:discount")],
        [types.InlineKeyboardButton(text="+–ë–∞–ª–∞–Ω—Å (USD-—ç–∫–≤.)", callback_data="promo:balance")],
        [types.InlineKeyboardButton(text="–ù–∞—Ü–µ–Ω–∫–∞ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è)", callback_data="promo:markup")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)

async def _create_promo(payload: dict) -> tuple[bool, str]:
    if not ADMIN_TOKEN:
        return False, "ADMIN_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±–æ—Ç–∞"
    if len(ADMIN_TOKEN) < 40:
        return False, "ADMIN_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)"

    url = api_url("promo/admin/create")
    try:
        async with httpx.AsyncClient(timeout=20.0) as c:
            r = await c.post(url, headers=_auth_headers(), json=payload)
        try:
            js = r.json()
        except Exception:
            js = None

        if r.status_code == 200 and isinstance(js, dict) and js.get("ok"):
            return True, f"‚úÖ –ì–æ—Ç–æ–≤–æ: {js}"

        if r.status_code == 403:
            return False, "‚ùå 403 Forbidden ‚Äî –ø—Ä–æ–≤–µ—Ä—å ADMIN_TOKEN —É –±–æ—Ç–∞ (–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏)"
        if r.status_code == 404:
            return False, f"‚ùå 404 Not Found ‚Äî –ø—Ä–æ–≤–µ—Ä—å API_BASE. URL: {url}"

        return False, f"‚ùå –û—à–∏–±–∫–∞ API: {r.status_code} {r.text}"
    except Exception as e:
        return False, f"‚ùå –°–µ—Ç—å/–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"

@router.callback_query(F.data == "admin:promos")
async def open_promos(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    text = (
        "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚Üí –ü—Ä–æ–º–æ–∫–æ–¥—ã\n\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∞ % ‚Äî –≤–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ +–ë–∞–ª–∞–Ω—Å ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —Å—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø:"
    )
    await c.message.edit_text(text, reply_markup=_kb_promo_types())
    await c.answer()

@router.callback_query(F.data.startswith("promo:"))
async def cb_pick_type(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    ptype = c.data.split(":", 1)[1]
    await state.set_state(PromoWizard.type)
    await state.update_data(type=ptype)
    await state.set_state(PromoWizard.code)
    await c.message.edit_text(f"–¢–∏–ø: <b>{ptype}</b>\n\n–í–≤–µ–¥–∏ –∫–æ–¥ (–ø—Ä–∏–º–µ—Ä: <code>WELCOME15</code>)")
    await c.answer()

@router.message(PromoWizard.code)
async def step_code(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    code = (m.text or "").strip().upper()
    if not (2 <= len(code) <= 64):
        return await m.reply("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2..64 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    data = await state.get_data()
    ptype = data.get("type")

    await state.update_data(code=code)
    await state.set_state(PromoWizard.value)

    if ptype == "discount":
        await m.reply("–í–≤–µ–¥–∏ —Å–∫–∏–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>15</code> –∏–ª–∏ <code>0.15</code>)")
    elif ptype == "balance":
        await m.reply("–í–≤–µ–¥–∏ —Å—É–º–º—É (USD, –º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω—ã–µ, –ø—Ä–∏–º–µ—Ä: <code>0.30</code>)")
    elif ptype == "markup":
        await m.reply("–í–≤–µ–¥–∏ –Ω–∞—Ü–µ–Ω–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>2</code> —á—Ç–æ–±—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å x2)")
    else:
        await m.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –û—Ç–º–µ–Ω–∞.")
        await state.clear()

@router.message(PromoWizard.value)
async def step_value(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    raw = (m.text or "").replace(",", ".").strip()
    try:
        val = float(raw)
    except Exception:
        return await m.reply("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    data = await state.get_data()
    ptype = data.get("type")

    if ptype == "discount":
        pct = val / 100.0 if val >= 1.0 else val
        if not (0.0 < pct < 1.0):
            return await m.reply("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (0..100).")
        await state.update_data(value=pct)
    elif ptype == "balance":
        if val <= 0:
            return await m.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
        await state.update_data(value=round(val, 4))
    elif ptype == "markup":
        if val <= 0:
            return await m.reply("–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
        await state.update_data(value=round(val, 6))
    else:
        await m.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –û—Ç–º–µ–Ω–∞.")
        return await state.clear()

    await state.set_state(PromoWizard.max_activations)
    await m.reply("–ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—á–∏—Å–ª–æ, 0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞). –ü—Ä–∏–º–µ—Ä: <code>10</code>")

@router.message(PromoWizard.max_activations)
async def step_max(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    try:
        max_act = int((m.text or "0").strip())
        if max_act < 0:
            raise ValueError
    except Exception:
        return await m.reply("–ù—É–∂–Ω–æ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ. –ü–æ–≤—Ç–æ—Ä–∏.")
    await state.update_data(max_activations=max_act)
    await state.set_state(PromoWizard.per_user_limit)
    await m.reply("–õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ ‚â• 1). –ü—Ä–∏–º–µ—Ä: <code>1</code>")

@router.message(PromoWizard.per_user_limit)
async def step_per_user(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    try:
        per_user = int((m.text or "1").strip())
        if per_user <= 0:
            raise ValueError
    except Exception:
        return await m.reply("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ ‚â• 1. –ü–æ–≤—Ç–æ—Ä–∏.")

    data = await state.get_data()
    ptype = data["type"]
    code = data["code"]
    value = data["value"]
    max_act = data["max_activations"]

    payload = {
        "code": code,
        "type": ptype,
        "max_activations": int(max_act),
        "per_user_limit": int(per_user),
        "is_active": True,
    }
    if ptype == "discount":
        payload["discount_percent"] = float(value)
    elif ptype == "balance":
        payload["balance_usd"] = float(value)
    elif ptype == "markup":
        payload["markup_value"] = float(value)

    ok, msg = await _create_promo(payload)
    await m.reply(msg, disable_web_page_preview=True)
    await state.clear()

# =========================
# ====== –†–ê–°–°–´–õ–ö–ê =========
# =========================
class BroadcastWizard(StatesGroup):
    text = State()
    choose_media = State()
    photo = State()
    confirm = State()

def _kb_broadcast_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast:start")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")],
    ])

def _kb_broadcast_choose():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üñº –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="bc:add_photo")],
        [types.InlineKeyboardButton(text="üöÄ –ù–µ—Ç, –∑–∞–ø—É—Å–∫", callback_data="bc:no_photo")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin:menu")],
    ])

def _kb_broadcast_confirm():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="bc:go")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")],
    ])

async def _fetch_all_user_ids() -> List[int]:
    """
    –¢—è–Ω–µ–º –∏–∑ API —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º.
    –¢—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/v1/admin/users (—Å–º. –Ω–∏–∂–µ –≤ –ø—É–Ω–∫—Ç–µ 2).
    """
    out: List[int] = []
    limit = 500
    offset = 0
    async with httpx.AsyncClient(timeout=30.0) as c:
        while True:
            r = await c.get(api_url("admin/users"), headers=_auth_headers(), params={"limit": limit, "offset": offset})
            if r.status_code != 200:
                break
            js = r.json() or {}
            items = js.get("items") or []
            for it in items:
                uid = int(it.get("tg_id") or 0)
                if uid > 0:
                    out.append(uid)
            total = int(js.get("total") or 0)
            offset += limit
            if offset >= total or not items:
                break
    return out

@router.callback_query(F.data == "admin:broadcast")
async def open_broadcast(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    await c.message.edit_text(
        "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚Üí –†–∞—Å—Å—ã–ª–∫–∞\n\n–ù–∞–∂–º–∏ ¬´–†–∞—Å—Å—ã–ª–∫–∞¬ª, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç.",
        reply_markup=_kb_broadcast_menu()
    )
    await c.answer()

@router.callback_query(F.data == "admin:broadcast:start")
async def bc_start(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.set_state(BroadcastWizard.text)
    await c.message.edit_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (HTML –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).")
    await c.answer()

@router.message(BroadcastWizard.text)
async def bc_text(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    text = (m.html_text or m.text or "").strip()
    if not text:
        return await m.reply("–ü—É—Å—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –µ—â—ë —Ä–∞–∑.")
    await state.update_data(text=text, photo_id=None)
    await state.set_state(BroadcastWizard.choose_media)
    await m.reply("–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", reply_markup=_kb_broadcast_choose())

@router.callback_query(F.data == "bc:add_photo")
async def bc_need_photo(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.set_state(BroadcastWizard.photo)
    await c.message.edit_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).")
    await c.answer()

@router.message(BroadcastWizard.photo, F.photo)
async def bc_got_photo(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    file_id = m.photo[-1].file_id
    await state.update_data(photo_id=file_id)
    await state.set_state(BroadcastWizard.confirm)
    await m.reply("–ì–æ—Ç–æ–≤–æ. –ó–∞–ø—É—Å–∫–∞–µ–º?", reply_markup=_kb_broadcast_confirm())

@router.callback_query(F.data == "bc:no_photo")
async def bc_no_photo(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.set_state(BroadcastWizard.confirm)
    await c.message.edit_text("–û–∫, –±–µ–∑ –º–µ–¥–∏–∞. –ó–∞–ø—É—Å–∫–∞–µ–º?", reply_markup=_kb_broadcast_confirm())
    await c.answer()

@router.callback_query(F.data == "bc:go")
async def bc_go(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    data = await state.get_data()
    text = data.get("text") or ""
    photo_id = data.get("photo_id")

    users = await _fetch_all_user_ids()
    total = len(users)
    if total == 0:
        await c.message.edit_text("–ü–æ—Ö–æ–∂–µ, –±–∞–∑–∞ –ø—É—Å—Ç–∞ (—ç–Ω–¥–ø–æ–∏–Ω—Ç admin/users –≤–µ—Ä–Ω—É–ª 0).")
        return await c.answer()

    ok = 0
    fail = 0

    await c.message.edit_text(f"–°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏: {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π‚Ä¶")

    # –í–Ω–∏–º–∞–Ω–∏–µ: —É Telegram –µ—Å—Ç—å –ª–∏–º–∏—Ç—ã. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–ø–∞–∫–µ—Ç–∞–º–∏¬ª, –Ω–æ –±–µ–∑ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ö–î.
    for uid in users:
        try:
            if photo_id:
                await c.bot.send_photo(uid, photo=photo_id, caption=text, parse_mode="HTML")
            else:
                await c.bot.send_message(uid, text, parse_mode="HTML", disable_web_page_preview=True)
            ok += 1
        except Exception:
            fail += 1

    await state.clear()
    await c.message.edit_text(f"–ì–æ—Ç–æ–≤–æ.\n–£—Å–ø–µ—à–Ω–æ: {ok}\n–û—à–∏–±–æ–∫: {fail}")
    await c.answer()

# =========================
# ====== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ======
# =========================
class StatsWizard(StatesGroup):
    user_id = State()

def _kb_stats():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîé –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="stats:request")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")],
    ])

@router.callback_query(F.data == "admin:stats")
async def open_stats(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    await c.message.edit_text(
        "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ‚Üí –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–ù–∞–∂–º–∏ ¬´–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å TG ID (–∏–ª–∏ seq).",
        reply_markup=_kb_stats()
    )
    await c.answer()

@router.callback_query(F.data == "stats:request")
async def stats_request(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.set_state(StatsWizard.user_id)
    await c.message.edit_text("–ü—Ä–∏—à–ª–∏ <b>TG ID</b> (–∏–ª–∏ seq) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç.")
    await c.answer()

async def _api_get(path: str, params: dict | None = None) -> Optional[dict]:
    try:
        async with httpx.AsyncClient(timeout=20.0) as c:
            r = await c.get(api_url(path), params=params)
        return r.json() if r.status_code == 200 else None
    except Exception:
        return None

@router.message(StatsWizard.user_id)
async def stats_user(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    try:
        uid = int((m.text or "").strip())
    except Exception:
        return await m.reply("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ ‚Äî TG ID –∏–ª–∏ seq.")

    # –ø—Ä–æ—Ñ–∏–ª—å
    u = await _api_get("user", {"user_id": uid, "autocreate": 0})
    if not u:
        return await m.reply("–ù–µ –Ω–∞–π–¥–µ–Ω (–∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ).")

    # —Ä–µ—Ñ. —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ref = await _api_get("referrals/stats", {"user_id": uid}) or {}
    # –ø–ª–∞—Ç–µ–∂–∏ ‚Äî —Å—á–∏—Ç–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã
    pays = await _api_get("payments", {"user_id": uid, "status": "completed"}) or []
    deposits = [p for p in pays if (p.get("method") != "ref" and p.get("status") == "completed")]
    dep_cnt = len(deposits)
    dep_sum = sum(float(p.get("amount_usd") or 0.0) for p in deposits)

    text = (
        "<b>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"TG ID / seq: <code>{uid}</code> / <code>{u.get('seq')}</code>\n"
        f"–ù–∏–∫: <b>{u.get('nick') or '‚Äî'}</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{u.get('balance')} {u.get('currency')}</b>\n"
        f"–î–µ–ø–æ–∑–∏—Ç–æ–≤ (paid): <b>{dep_cnt}</b> –Ω–∞ <b>{round(dep_sum, 2)} USD</b>\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤—Å–µ–≥–æ: <b>{ref.get('invited_total', 0)}</b>\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º: <b>{ref.get('invited_with_deposit', 0)}</b>\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: <b>{ref.get('rate_percent', 10)}%</b>\n"
        f"–°—É–º–º–∞ —Ä–µ—Ñ. –±–æ–Ω—É—Å–æ–≤: <b>{ref.get('earned_total', 0)} {ref.get('earned_currency', u.get('currency'))}</b>\n"
    )
    await m.reply(text, disable_web_page_preview=True)
    await state.clear()

# =========================
# ====== –ú–ï–ù–Æ /admin ======
# =========================
def _kb_admin_menu():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üéü –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin:promos")],
        [types.InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞",  callback_data="admin:broadcast")],
        [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
    ])

@router.message(Command("admin"))
async def cmd_admin(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    await state.clear()
    await m.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=_kb_admin_menu())

@router.callback_query(F.data == "admin:menu")
async def back_to_menu(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    await c.message.edit_text("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=_kb_admin_menu())
    await c.answer()
