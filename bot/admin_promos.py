# bot/handlers/admin.py
# -*- coding: utf-8 -*-
import os
import asyncio
import datetime as dt
from typing import Optional, Tuple

import httpx
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router(name="admin")

# ===== ENV / API =====
ADMIN_IDS = {
    int(x) for x in (os.getenv("ADMIN_IDS", "").replace(" ", "").split(","))
    if x.isdigit()
}
API_BASE = (os.getenv("API_BASE", "http://127.0.0.1:8011") or "").rstrip("/")
ADMIN_TOKEN = os.getenv("ADMIN_TOKEN", "")

if not ADMIN_IDS:
    print("[admin] WARNING: ADMIN_IDS is empty ‚Äì /admin –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

def api_url(path: str) -> str:
    """–°–æ–±–∏—Ä–∞–µ—Ç URL —Ç–∞–∫, —á—Ç–æ–±—ã /api/v1 –±—ã–ª —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑."""
    base = API_BASE.rstrip("/")
    p = path.lstrip("/")
    if not base.endswith("/api/v1"):
        p = "api/v1/" + p
    return f"{base}/{p}"

# ===== ACCESS =====
def _admin_only(m: types.Message | types.CallbackQuery) -> bool:
    user = m.from_user if isinstance(m, (types.Message, types.CallbackQuery)) else None
    return bool(user and user.id in ADMIN_IDS)

# ====== UI ======
def kb_admin_main() -> types.InlineKeyboardMarkup:
    kb = [
        [types.InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞",   callback_data="admin:bc")],
        [types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [types.InlineKeyboardButton(text="üè∑ –ü—Ä–æ–º–æ–∫–æ–¥—ã",  callback_data="admin:promo")],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)

def kb_back_admin() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]]
    )

# ===== –ü—Ä–æ–º–æ–∫–æ–¥—ã (–≤–∑—è—Ç–æ –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞ –∏ —Å–ª–µ–≥–∫–∞ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–æ) =====
class PromoWizard(StatesGroup):
    type = State()
    code = State()
    value = State()
    max_activations = State()
    per_user_limit = State()

def _kb_promo_types():
    kb = [
        [types.InlineKeyboardButton(text="–°–∫–∏–¥–∫–∞ % (–Ω–∞ –∑–∞–∫–∞–∑)", callback_data="promo:discount")],
        [types.InlineKeyboardButton(text="+–ë–∞–ª–∞–Ω—Å (USD-—ç–∫–≤.)",   callback_data="promo:balance")],
        [types.InlineKeyboardButton(text="–ù–∞—Ü–µ–Ω–∫–∞ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è)", callback_data="promo:markup")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)

async def _create_promo(payload: dict) -> tuple[bool, str]:
    if not ADMIN_TOKEN:
        return False, "ADMIN_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±–æ—Ç–∞"
    if len(ADMIN_TOKEN) < 40:
        return False, "ADMIN_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π)"

    url = api_url("promo/admin/create")
    headers = {"Authorization": f"Bearer {ADMIN_TOKEN}", "Content-Type": "application/json"}

    try:
        async with httpx.AsyncClient(timeout=20.0) as c:
            r = await c.post(url, headers=headers, json=payload)
        try:
            js = r.json()
        except Exception:
            js = None

        if r.status_code == 200 and isinstance(js, dict) and js.get("ok"):
            return True, f"‚úÖ –ì–æ—Ç–æ–≤–æ: {js}"

        if r.status_code == 403:
            return False, "‚ùå 403 Forbidden ‚Äî –ø—Ä–æ–≤–µ—Ä—å ADMIN_TOKEN —É –±–æ—Ç–∞ (–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞)"
        if r.status_code == 404:
            return False, f"‚ùå 404 Not Found ‚Äî –ø—Ä–æ–≤–µ—Ä—å API_BASE –∏ –ø—É—Ç—å. URL: {url}"

        return False, f"‚ùå –û—à–∏–±–∫–∞ API: {r.status_code} {r.text}"
    except Exception as e:
        return False, f"‚ùå –°–µ—Ç—å/–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"

# ===== –†–∞—Å—Å—ã–ª–∫–∞ =====
class Broadcast(StatesGroup):
    waiting_text = State()
    pick_media    = State()
    waiting_photo = State()
    confirm       = State()

def kb_bc_options(has_photo: bool) -> types.InlineKeyboardMarkup:
    row1 = []
    if not has_photo:
        row1.append(types.InlineKeyboardButton(text="üñº –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="bc:addphoto"))
    row1.append(types.InlineKeyboardButton(text="üö´ –ù–µ –Ω—É–∂–Ω–æ", callback_data="bc:nophoto"))
    kb = [
        row1,
        [
            types.InlineKeyboardButton(text="‚úÖ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="bc:run"),
            types.InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∞",    callback_data="bc:cancel"),
        ],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=kb)

async def _fetch_admin_users() -> list[dict]:
    url = api_url("admin/users")
    headers = {"Authorization": f"Bearer {ADMIN_TOKEN}"} if ADMIN_TOKEN else {}
    async with httpx.AsyncClient(timeout=30.0) as c:
        r = await c.get(url, headers=headers)
        r.raise_for_status()
        js = r.json()
        if not isinstance(js, list):
            return []
        return js

# ===== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ =====
def _fmt_ts(ts: int | None) -> str:
    if not ts:
        return "-"
    try:
        return dt.datetime.fromtimestamp(int(ts)).strftime("%Y-%m-%d %H:%M")
    except Exception:
        return str(ts)

# ================== ENTRY ==================
@router.message(Command("admin"))
async def cmd_admin(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    await state.clear()
    text = (
        "<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:"
    )
    await m.answer(text, reply_markup=kb_admin_main())

@router.callback_query(F.data == "admin:menu")
async def cb_admin_menu(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    await c.message.edit_text("<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb_admin_main())
    await c.answer()

# ====== –ü—Ä–æ–º–æ–∫–æ–¥—ã ======
@router.callback_query(F.data == "admin:promo")
async def cb_admin_promo(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    text = (
        "–†–∞–∑–¥–µ–ª <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã</b>\n\n"
        "‚Ä¢ –°–∫–∏–¥–∫–∞ % ‚Äî –≤–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ +–ë–∞–ª–∞–Ω—Å ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —Å—Ä–∞–∑—É –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ –ù–∞—Ü–µ–Ω–∫–∞ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø:"
    )
    await c.message.edit_text(text, reply_markup=_kb_promo_types())
    await c.answer()

@router.callback_query(F.data.startswith("promo:"))
async def cb_pick_type(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    ptype = c.data.split(":", 1)[1]
    await state.set_state(PromoWizard.type)
    await state.update_data(type=ptype)
    await state.set_state(PromoWizard.code)
    await c.message.edit_text(
        f"–¢–∏–ø: <b>{ptype}</b>\n\n–í–≤–µ–¥–∏ –∫–æ–¥ (–ø—Ä–∏–º–µ—Ä: <code>WELCOME15</code>)",
        reply_markup=kb_back_admin()
    )
    await c.answer()

@router.message(PromoWizard.code)
async def step_code(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    code = (m.text or "").strip().upper()
    if not (2 <= len(code) <= 64):
        return await m.reply("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2..64 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    data = await state.get_data()
    ptype = data.get("type")

    await state.update_data(code=code)
    await state.set_state(PromoWizard.value)

    if ptype == "discount":
        await m.reply("–í–≤–µ–¥–∏ —Å–∫–∏–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>15</code> –∏–ª–∏ <code>0.15</code>)")
    elif ptype == "balance":
        await m.reply("–í–≤–µ–¥–∏ —Å—É–º–º—É (USD, –º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω—ã–µ, –ø—Ä–∏–º–µ—Ä: <code>0.30</code>)")
    elif ptype == "markup":
        await m.reply("–í–≤–µ–¥–∏ –Ω–∞—Ü–µ–Ω–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>2</code> —á—Ç–æ–±—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å x2)")
    else:
        await m.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –û—Ç–º–µ–Ω–∞.")
        await state.clear()

@router.message(PromoWizard.value)
async def step_value(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    raw = (m.text or "").replace(",", ".").strip()
    try:
        val = float(raw)
    except Exception:
        return await m.reply("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    data = await state.get_data()
    ptype = data.get("type")

    if ptype == "discount":
        pct = val / 100.0 if val >= 1.0 else val
        if not (0.0 < pct < 1.0):
            return await m.reply("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (0..100).")
        await state.update_data(value=pct)
    elif ptype == "balance":
        if val <= 0:
            return await m.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
        await state.update_data(value=round(val, 4))
    elif ptype == "markup":
        if val <= 0:
            return await m.reply("–ù–∞—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0.")
        await state.update_data(value=round(val, 6))
    else:
        await m.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –û—Ç–º–µ–Ω–∞.")
        return await state.clear()

    await state.set_state(PromoWizard.max_activations)
    await m.reply("–ú–∞–∫—Å. –∞–∫—Ç–∏–≤–∞—Ü–∏–π (—á–∏—Å–ª–æ, 0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞). –ü—Ä–∏–º–µ—Ä: <code>10</code>")

@router.message(PromoWizard.max_activations)
async def step_max(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    try:
        max_act = int((m.text or "0").strip());  assert max_act >= 0
    except Exception:
        return await m.reply("–ù—É–∂–Ω–æ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ. –ü–æ–≤—Ç–æ—Ä–∏.")
    await state.update_data(max_activations=max_act)
    await state.set_state(PromoWizard.per_user_limit)
    await m.reply("–õ–∏–º–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–ª–æ–µ ‚â• 1). –ü—Ä–∏–º–µ—Ä: <code>1</code>")

@router.message(PromoWizard.per_user_limit)
async def step_per_user(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    try:
        per_user = int((m.text or "1").strip());  assert per_user > 0
    except Exception:
        return await m.reply("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ ‚â• 1. –ü–æ–≤—Ç–æ—Ä–∏.")

    data = await state.get_data()
    ptype = data["type"]
    code = data["code"]
    value = data["value"]
    max_act = data["max_activations"]

    payload = {
        "code": code,
        "type": ptype,
        "max_activations": int(max_act),
        "per_user_limit": int(per_user),
        "is_active": True,
    }
    if ptype == "discount":
        payload["discount_percent"] = float(value)
    elif ptype == "balance":
        payload["balance_usd"] = float(value)
    elif ptype == "markup":
        payload["markup_value"] = float(value)

    ok, msg = await _create_promo(payload)
    await m.reply(msg, disable_web_page_preview=True, reply_markup=kb_back_admin())
    await state.clear()

# ====== –†–∞—Å—Å—ã–ª–∫–∞ ======
@router.callback_query(F.data == "admin:bc")
async def bc_start(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    await state.set_state(Broadcast.waiting_text)
    await c.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å <b>—Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (HTML –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è).",
        reply_markup=kb_back_admin()
    )
    await c.answer()

@router.message(Broadcast.waiting_text)
async def bc_got_text(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    text = m.html_text or m.text or ""
    if not text.strip():
        return await m.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –µ—â—ë —Ä–∞–∑.")
    await state.update_data(text=text, photo_id=None)
    await state.set_state(Broadcast.pick_media)
    await m.reply(
        "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
        reply_markup=kb_bc_options(has_photo=False)
    )

@router.callback_query(F.data == "bc:addphoto")
async def bc_add_photo(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.set_state(Broadcast.waiting_photo)
    await c.message.edit_text("–ü—Ä–∏—à–ª–∏ <b>—Ñ–æ—Ç–æ</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).", reply_markup=kb_back_admin())
    await c.answer()

@router.message(Broadcast.waiting_photo, F.photo)
async def bc_got_photo(m: types.Message, state: FSMContext):
    if not _admin_only(m):
        return
    file_id = m.photo[-1].file_id
    await state.update_data(photo_id=file_id)
    await state.set_state(Broadcast.confirm)
    await m.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ó–∞–ø—É—Å–∫–∞–µ–º?", reply_markup=kb_bc_options(has_photo=True))

@router.callback_query(F.data == "bc:nophoto")
async def bc_no_photo(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    data = await state.get_data()
    if not data.get("text"):
        await c.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ ‚Äî –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.", show_alert=True)
        return
    await state.set_state(Broadcast.confirm)
    await c.message.edit_text("–û–∫–µ–π, –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –ó–∞–ø—É—Å–∫–∞–µ–º?", reply_markup=kb_bc_options(has_photo=False))
    await c.answer()

@router.callback_query(F.data == "bc:cancel")
async def bc_cancel(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    await state.clear()
    await c.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb_back_admin())
    await c.answer()

@router.callback_query(F.data == "bc:run")
async def bc_run(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    data = await state.get_data()
    text = (data.get("text") or "").strip()
    photo_id = data.get("photo_id")
    if not text:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç.", show_alert=True)
        return

    # –ø–æ–¥—Ç—è–Ω–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        users = await _fetch_admin_users()
    except Exception as e:
        await c.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", reply_markup=kb_back_admin())
        return await c.answer()

    total = len(users)
    if total == 0:
        await c.message.edit_text("–ü–æ—Ö–æ–∂–µ, –±–∞–∑–∞ –ø—É—Å—Ç–∞ (—ç–Ω–¥–ø–æ–∏–Ω—Ç admin/users –≤–µ—Ä–Ω—É–ª 0).", reply_markup=kb_back_admin())
        return await c.answer()

    await c.message.edit_text(f"–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º‚Ä¶")

    sent = 0
    failed = 0
    bot = c.bot

    for u in users:
        uid = u.get("tg_id")
        if not uid:
            failed += 1
            continue
        try:
            if photo_id:
                await bot.send_photo(uid, photo_id, caption=text, parse_mode="HTML")
            else:
                await bot.send_message(uid, text, parse_mode="HTML", disable_web_page_preview=True)
            sent += 1
        except Exception:
            failed += 1
        # –±–µ–∑ –∫–¥, –∫–∞–∫ –ø—Ä–æ—Å–∏–ª; –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —â–∞–¥—è—â–∏–π —Ä–µ–∂–∏–º ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
        # await asyncio.sleep(0.03)

    await state.clear()
    await c.message.edit_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{sent}</b>\n"
        f"‚ùå –û—à–∏–±–æ–∫: <b>{failed}</b>\n"
        f"üì¨ –í—Å–µ–≥–æ: <b>{total}</b>",
        reply_markup=kb_back_admin()
    )
    await c.answer()

# ====== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ======
@router.callback_query(F.data == "admin:stats")
async def admin_stats(c: types.CallbackQuery, state: FSMContext):
    if not _admin_only(c):
        return await c.answer()
    try:
        users = await _fetch_admin_users()
    except Exception as e:
        await c.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}", reply_markup=kb_back_admin())
        return await c.answer()

    total = len(users)
    with_nick = sum(1 for x in users if x.get("nick"))
    paid_topups_users = sum(1 for x in users if int(x.get("topups_paid") or 0) > 0)
    orders_users = sum(1 for x in users if int(x.get("orders") or 0) > 0)

    head = (
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total}</b>\n"
        f"–° –Ω–∏–∫–æ–º: <b>{with_nick}</b>\n"
        f"–î–µ–ø–æ–∑–∏—Ç—ã (‚â•1): <b>{paid_topups_users}</b>\n"
        f"–ó–∞–∫–∞–∑—ã (‚â•1): <b>{orders_users}</b>\n\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        "<code>tg_id      | nick         | bal   | cur | orders | topups_paid | refs | last_seen</code>\n"
    )

    # –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ last_seen_at —É–±—ã–≤.
    users_sorted = sorted(users, key=lambda x: int(x.get("last_seen_at") or 0), reverse=True)[:20]
    lines = []
    for u in users_sorted:
        line = (
            f"<code>"
            f"{str(u.get('tg_id')).ljust(10)}| "
            f"{(u.get('nick') or '-').ljust(12)[:12]} | "
            f"{str(round(float(u.get('balance') or 0.0), 2)).rjust(6)} | "
            f"{(u.get('currency') or 'RUB')[:3].ljust(3)} | "
            f"{str(u.get('orders') or 0).rjust(6)} | "
            f"{str(u.get('topups_paid') or 0).rjust(11)} | "
            f"{str(u.get('refs') or 0).rjust(4)} | "
            f"{_fmt_ts(u.get('last_seen_at'))}"
            f"</code>"
        )
        lines.append(line)

    text = head + ("\n".join(lines) if lines else "‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî")
    await c.message.edit_text(text, reply_markup=kb_back_admin(), disable_web_page_preview=True)
    await c.answer()
