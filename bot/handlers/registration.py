# bot/handlers/registration.py
# -*- coding: utf-8 -*-
import html
import random
import string
from typing import Tuple, Optional

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import httpx

from bot.config import API_BASE
from .start import send_main_menu, api_fetch_user  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π helper

router = Router()
_http = httpx.AsyncClient(timeout=15.0)

# ====== FSM ======
class RegStates(StatesGroup):
    waiting_nick = State()

# ====== Keyboards ======
def kb_nick_prompt() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫", callback_data="reg:gen")]
    ])

def kb_gen(nick: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data=f"reg:use:{nick}")],
        [
            InlineKeyboardButton(text="‚è≠ –î–∞–ª—å—à–µ",  callback_data="reg:next"),
            InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="reg:cancel"),
        ],
    ])

# ====== Helpers ======
ALLOWED_CHARS = set("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-.")
def sanitize_nick(raw: str) -> str:
    n = (raw or "").strip().replace(" ", "_")
    n = "".join(ch for ch in n if ch in ALLOWED_CHARS)
    # —Å–µ—Ä–≤–µ—Ä —Ç—Ä–µ–±—É–µ—Ç 3..32 ‚Äî –∂—ë—Å—Ç–∫–æ —Ä–µ–∂–µ–º —Å–≤–µ—Ä—Ö—É
    return n[:32]

def make_random_nick() -> str:
    base = random.choice(["CTR", "Click", "Ops", "Flow", "Lead", "Vibe", "Nova", "Rider", "Drago"])
    suffix = "".join(random.choices(string.ascii_uppercase + string.digits, k=2))
    num = random.randint(10, 99)
    return f"{base}_{suffix}{num}"

async def has_nick(user_id: int) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–∏–∫ (–∞ –∑–Ω–∞—á–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞).
    –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ¬´–≥—Ä–µ–µ—Ç¬ª –ø—Ä–æ—Ñ–∏–ª—å (autocreate=1).
    """
    try:
        u = await api_fetch_user(user_id, autocreate=1)
        return bool(u and u.get("nick"))
    except Exception:
        # –Ω–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        return False

async def api_register(user_id: int, nick: str) -> Tuple[bool, str]:
    """
    True,''                       -> —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–∫
    True,'exists'                 -> –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω (—Å –Ω–∏–∫–æ–º) ‚Äî —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
    False,'taken'                 -> –Ω–∏–∫ –∑–∞–Ω—è—Ç
    False,<user-friendly message> -> –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
    """
    try:
        r = await _http.post(f"{API_BASE}/register", json={"user_id": user_id, "nick": nick})
        if r.status_code == 200:
            return True, ""
        if r.status_code == 409:
            try:
                detail = (r.json().get("detail") or "").strip()
            except Exception:
                detail = ""
            if detail == "–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω":
                return True, "exists"
            if detail == "–ù–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç":
                return False, "taken"
            return False, (detail or "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
        if r.status_code == 400:
            try:
                detail = r.json().get("detail")
            except Exception:
                detail = None
            return False, (detail or "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫.")
        return False, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    except Exception:
        return False, "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."

# ====== Handlers ======
@router.callback_query(F.data == "reg:start")
async def reg_start(c: CallbackQuery, state: FSMContext):
    await c.answer()
    # –≤–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ù–ê–õ–ò–ß–ò–ï –ù–ò–ö–ê, –∞ –Ω–µ ¬´–ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç¬ª
    if await has_nick(c.from_user.id):
        await c.message.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω.")
        await send_main_menu(c)
        return

    await state.set_state(RegStates.waiting_nick)
    text = (
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å <b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º</b>.\n"
        "–ï–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å.\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ–º <u>–∏–ª–∏</u> –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª."
    )
    await c.message.answer(text, reply_markup=kb_nick_prompt())

@router.callback_query(F.data == "reg:gen")
async def reg_gen(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if await has_nick(c.from_user.id):
        await c.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.", show_alert=True)
        await send_main_menu(c)
        return
    if not await state.get_state():
        await c.answer("–ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    nick = make_random_nick()
    await state.update_data(suggest=nick)
    await c.message.answer(
        f"–í–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∫–∞: <b>{html.escape(nick)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_gen(nick)
    )

@router.callback_query(F.data == "reg:next")
async def reg_next(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if await has_nick(c.from_user.id):
        await c.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.", show_alert=True)
        await send_main_menu(c)
        return
    if not await state.get_state():
        await c.answer("–ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    nick = make_random_nick()
    await state.update_data(suggest=nick)
    await c.message.answer(
        f"–í–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∫–∞: <b>{html.escape(nick)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_gen(nick)
    )

@router.callback_query(F.data == "reg:cancel")
async def reg_cancel(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if await has_nick(c.from_user.id):
        await c.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.", show_alert=True)
        await send_main_menu(c)
        return
    if not await state.get_state():
        await c.answer("–ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return
    await c.message.answer("–û–∫–µ–π. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –∏–ª–∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.")
    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_nick

@router.callback_query(F.data.startswith("reg:use:"))
async def reg_use(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if await has_nick(c.from_user.id):
        await c.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.", show_alert=True)
        await send_main_menu(c)
        return
    if not await state.get_state():
        await c.answer("–ù–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        return

    raw = c.data.split("reg:use:", 1)[1]
    nick = sanitize_nick(raw)
    if len(nick) < 3:
        await c.message.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")
        return

    ok, reason = await api_register(c.from_user.id, nick)
    if not ok:
        if reason == "taken":
            await c.message.answer(
                "–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.",
                reply_markup=kb_nick_prompt()
            )
        else:
            await c.message.answer(reason)
        return

    await state.clear()
    await send_main_menu(c, nick=nick)

@router.message(RegStates.waiting_nick, F.text.as_("t"))
async def reg_text_nick(m: Message, state: FSMContext, t: str):
    if await has_nick(m.from_user.id):
        await state.clear()
        await m.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞—é –º–∞–≥–∞–∑–∏–Ω.")
        await send_main_menu(m)
        return

    nick = sanitize_nick(t)
    if len(nick) < 3:
        await m.answer(
            "–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.",
            reply_markup=kb_nick_prompt()
        )
        return

    ok, reason = await api_register(m.from_user.id, nick)
    if not ok:
        if reason == "taken":
            await m.answer(
                "–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.",
                reply_markup=kb_nick_prompt()
            )
        else:
            await m.answer(reason)
        return

    await state.clear()
    await send_main_menu(m, nick=nick)
