# -*- coding: utf-8 -*-
import html
import random
import string
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import httpx

from bot.config import API_BASE
from .start import send_main_menu  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞

router = Router()
_http = httpx.AsyncClient(timeout=15.0)

# ====== FSM ======
class RegStates(StatesGroup):
    waiting_nick = State()

# ====== Keyboards ======
def kb_nick_prompt() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫", callback_data="reg:gen")]
    ])

def kb_gen(nick: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å", callback_data=f"reg:use:{nick}")],
        [
            InlineKeyboardButton(text="‚è≠ –î–∞–ª—å—à–µ",  callback_data="reg:next"),
            InlineKeyboardButton(text="‚úñ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="reg:cancel"),
        ],
    ])

# ====== Helpers ======
def make_random_nick() -> str:
    base = random.choice(["CTR","Click","Ops","Flow","Lead","Vibe","Nova","Rider","Drago"])
    suffix = "".join(random.choices(string.ascii_uppercase + string.digits, k=2))
    num = random.randint(10, 99)
    return f"{base}_{suffix}{num}"

async def api_register(user_id: int, nick: str) -> tuple[bool, str]:
    try:
        r = await _http.post(f"{API_BASE}/register", json={"user_id": user_id, "nick": nick})
        if r.status_code == 200:
            return True, ""
        if r.status_code == 409:
            return False, "–ù–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω."
        if r.status_code == 400:
            return False, r.json().get("detail", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫.")
        return False, "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∏–∫."
    except Exception:
        return False, "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."

# ====== Handlers ======
@router.callback_query(F.data == "reg:start")
async def reg_start(c: CallbackQuery, state: FSMContext):
    await c.answer()
    await state.set_state(RegStates.waiting_nick)
    text = (
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å <b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º</b>.\n"
        "–ï–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å.\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ–º <u>–∏–ª–∏</u> –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª."
    )
    await c.message.answer(text, reply_markup=kb_nick_prompt())

@router.callback_query(F.data == "reg:gen")
async def reg_gen(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if not await state.get_state():
        # –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –Ω–∏–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω
        await c.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.", show_alert=True)
        return
    nick = make_random_nick()
    await state.update_data(suggest=nick)
    await c.message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∫–∞: <b>{html.escape(nick)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_gen(nick))

@router.callback_query(F.data == "reg:next")
async def reg_next(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if not await state.get_state():
        await c.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.", show_alert=True)
        return
    nick = make_random_nick()
    await state.update_data(suggest=nick)
    await c.message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∫–∞: <b>{html.escape(nick)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb_gen(nick))

@router.callback_query(F.data == "reg:cancel")
async def reg_cancel(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if not await state.get_state():
        await c.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.", show_alert=True)
        return
    await c.message.answer("–û–∫–µ–π. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫ –∏–ª–∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.")
    # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_nick

@router.callback_query(F.data.startswith("reg:use:"))
async def reg_use(c: CallbackQuery, state: FSMContext):
    await c.answer()
    if not await state.get_state():
        await c.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω.", show_alert=True)
        return
    nick = c.data.split("reg:use:", 1)[1].strip()
    ok, err = await api_register(c.from_user.id, nick)
    if not ok:
        await c.message.answer(err)
        return
    await state.clear()
    await send_main_menu(c, nick=nick)

@router.message(RegStates.waiting_nick, F.text.len() >= 3)
async def reg_text_nick(m: Message, state: FSMContext):
    nick = m.text.strip()
    ok, err = await api_register(m.from_user.id, nick)
    if not ok:
        await m.answer(err + "\n\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–∏–∫ –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.", reply_markup=kb_nick_prompt())
        return
    await state.clear()
    await send_main_menu(m, nick=nick)

@router.message(RegStates.waiting_nick)
async def reg_text_too_short(m: Message):
    await m.answer("–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n–ò–ª–∏ –Ω–∞–∂–º–∏ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.", reply_markup=kb_nick_prompt())
