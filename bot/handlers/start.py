# bot/handlers/start.py
# -*- coding: utf-8 -*-
import html
import re
from typing import Optional

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
    WebAppInfo,
)
import httpx

from bot.config import (
    API_BASE,
    WEBAPP_URL,
    GROUP_URL,
    PUBLIC_CHAT_URL,
    SCHOOL_URL,
    REVIEWS_URL,
    WELCOME_IMG,
    MENU_IMG,
)

router = Router()
_http = httpx.AsyncClient(timeout=15.0)

# ---------- UI ----------
def kb_welcome() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg:start")]
    ])

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞", callback_data="menu:refs"),
         InlineKeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞",     callback_data="menu:roulette")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="menu:about"),
         InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã",     url=REVIEWS_URL or PUBLIC_CHAT_URL or GROUP_URL)],
    ])

# ---------- API helpers ----------
async def api_fetch_user(user_id: int, autocreate: int = 1) -> Optional[dict]:
    """–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—ë–º)."""
    try:
        r = await _http.get(f"{API_BASE}/user", params={"user_id": user_id, "autocreate": autocreate})
        return r.json() if r.status_code == 200 else None
    except Exception:
        return None

async def api_user_exists(user_id: int) -> bool:
    try:
        r = await _http.get(f"{API_BASE}/user/exists", params={"user_id": user_id})
        return bool(r.status_code == 200 and r.json().get("exists"))
    except Exception:
        return False

async def bind_ref_silently(user_id: int, code: str) -> None:
    try:
        await _http.post(f"{API_BASE}/referrals/bind", json={"user_id": user_id, "code": code})
    except Exception:
        pass

# ---------- utils ----------
def extract_ref_code(text: Optional[str]) -> Optional[str]:
    if not text:
        return None
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        return None
    payload = parts[1].strip().lower()
    if not payload.startswith("ref_"):
        return None
    code = re.sub(r"[^a-z0-9_-]", "", payload[4:])
    return code or None

# ---------- handlers ----------
@router.message(CommandStart())
async def start_cmd(m: Message):
    uid = m.from_user.id

    # —Ç–∏—Ö–æ –±–∏–Ω–¥–∏–º —Ä–µ—Ñ-–∫–æ–¥ –∏–∑ /start ref_xxx
    code = extract_ref_code(m.text)
    if code:
        await bind_ref_silently(uid, code)

    # 1) –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    u = await api_fetch_user(uid, autocreate=1)

    # 2) –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å –∏ –Ω–∏–∫ –∑–∞–¥–∞–Ω ‚Äî —Å—Ä–∞–∑—É –≤ –º–µ–Ω—é
    if u and u.get("nick"):
        await send_main_menu(m)
        return

    # 3) –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –Ω–æ –±–µ–∑ –Ω–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if u is not None and not u.get("nick"):
        caption = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "
            f"<a href=\"{html.escape(GROUP_URL or PUBLIC_CHAT_URL or '#')}\">Slovekiza</a>!</b>\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –Ω–∏–∫–Ω–µ–π–º. –ï–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å."
        )
        photo = FSInputFile(WELCOME_IMG) if WELCOME_IMG.exists() else None
        if photo:
            await m.answer_photo(photo, caption=caption, reply_markup=kb_welcome())
        else:
            await m.answer(caption, reply_markup=kb_welcome())
        return

    # 4) –∑–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å ‚Äî API –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª: –ø—Ä–æ–≤–µ—Ä–∏–º exists –∏ –Ω–µ –±—É–¥–µ–º –ª–æ–º–∞—Ç—å UX
    if await api_user_exists(uid):
        await send_main_menu(m)
        return

    # 5) —Å–æ–≤—Å–µ–º –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "
        f"<a href=\"{html.escape(GROUP_URL or PUBLIC_CHAT_URL or '#')}\">Slovekiza</a>!</b>\n\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    photo = FSInputFile(WELCOME_IMG) if WELCOME_IMG.exists() else None
    if photo:
        await m.answer_photo(photo, caption=caption, reply_markup=kb_welcome())
    else:
        await m.answer(caption, reply_markup=kb_welcome())

async def send_main_menu(m: Message | CallbackQuery, nick: str | None = None):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç{',' if nick else ''} <b>{html.escape(nick) if nick else m.from_user.full_name}</b>!\n"
        f"–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω <a href=\"{html.escape(GROUP_URL or '#')}\">Slovekizna</a>.\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    photo = FSInputFile(MENU_IMG) if MENU_IMG.exists() else None
    if isinstance(m, CallbackQuery):
        if photo:
            await m.message.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.message.answer(text, reply_markup=kb_main())
        await m.answer()
    else:
        if photo:
            await m.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.answer(text, reply_markup=kb_main())
