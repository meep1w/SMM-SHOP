# -*- coding: utf-8 -*-
import html
from typing import Optional

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, CallbackQuery, WebAppInfo
)
import httpx

from bot.config import (
    API_BASE,
    WEBAPP_URL,
    GROUP_URL,
    PUBLIC_CHAT_URL,
    SCHOOL_URL,
    REVIEWS_URL,
    WELCOME_IMG,
    MENU_IMG,
)

router = Router()
_http = httpx.AsyncClient(timeout=15.0)

# ---------------- UI ----------------

def kb_welcome() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg:start")]
    ])

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))],
        [
            InlineKeyboardButton(text="üë• –†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞", callback_data="menu:refs"),
            InlineKeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞",     callback_data="menu:roulette"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="menu:about"),
            InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã",     url=REVIEWS_URL or PUBLIC_CHAT_URL or GROUP_URL),
        ],
    ])

# ---------------- API helpers ----------------

async def api_user_exists(user_id: int) -> bool:
    try:
        r = await _http.get(f"{API_BASE}/user/exists", params={"user_id": user_id})
        return bool(r.json().get("exists"))
    except Exception:
        # –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return True

async def api_bind_ref(user_id: int, code: str) -> dict:
    """
    POST /api/v1/referrals/bind  -> { ok, already? }
    """
    try:
        r = await _http.post(f"{API_BASE}/referrals/bind", json={"user_id": user_id, "code": code})
        # 200 OK: {"ok": True} –∏–ª–∏ {"ok": True, "already": True}
        if r.status_code == 200:
            return r.json() or {"ok": True}
        # 4xx: –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω / self_ref / –∏ —Ç.–¥.
        try:
            msg = r.json()
        except Exception:
            msg = {"error": r.text}
        return {"ok": False, "status": r.status_code, **(msg if isinstance(msg, dict) else {})}
    except Exception as e:
        return {"ok": False, "error": str(e)}

def extract_start_payload(text: Optional[str]) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç payload –∏–∑ /start: "ref_xxx" –ª–∏–±–æ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
    """
    if not text:
        return ""
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        return ""
    return (parts[1] or "").strip()

def try_extract_ref_code(payload: str) -> Optional[str]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 'ref_abc123' -> 'abc123', –∏–Ω–∞—á–µ None.
    """
    if not payload:
        return None
    p = payload.strip().lower()
    if not p.startswith("ref_"):
        return None
    code = p[4:].strip()
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã/–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ/–¥–µ—Ñ–∏—Å)
    import re
    code = re.sub(r"[^a-z0-9_-]", "", code)
    return code or None

# ---------------- Handlers ----------------

@router.message(CommandStart())
async def start_cmd(m: Message):
    uid = m.from_user.id

    # 1) –¥–∏–ø–ª–∏–Ω–∫: /start ref_xxx -> –ø—Ä–∏–≤—è–∑–∫–∞
    payload = extract_start_payload(m.text)
    ref_code = try_extract_ref_code(payload)
    ref_notice: Optional[str] = None
    if ref_code:
        res = await api_bind_ref(uid, ref_code)
        if res.get("ok"):
            if res.get("already"):
                ref_notice = "‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é."
            else:
                ref_notice = "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –ë–æ–Ω—É—Å –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è —Å –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞."
        else:
            # –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏–º –ø—Ä–∏—á–∏–Ω—É
            err = (
                res.get("error")
                or res.get("detail")
                or res.get("message")
                or ("–ö–æ–¥ –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω" + (f" (HTTP {res.get('status')})" if res.get("status") else ""))
            )
            ref_notice = f"‚ùå {err}"

    # 2) –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    exists = await api_user_exists(uid)
    if not exists:
        # —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è + (–µ—Å–ª–∏ –±—ã–ª —Ä–µ—Ñ-–∫–æ–¥) ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        caption = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "
            f"<a href=\"{html.escape(GROUP_URL or PUBLIC_CHAT_URL or '#')}\">Slovekiza</a>!</b>\n\n"
            "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
            f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
            f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
        )
        photo = FSInputFile(WELCOME_IMG) if WELCOME_IMG.exists() else None
        if photo:
            msg = await m.answer_photo(photo, caption=caption, reply_markup=kb_welcome())
        else:
            msg = await m.answer(caption, reply_markup=kb_welcome())
        if ref_notice:
            await m.answer(ref_notice)
        return

    # 3) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (+ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ-–∫–æ–¥–µ, –µ—Å–ª–∏ –±—ã–ª–æ)
    await send_main_menu(m)
    if ref_notice:
        await m.answer(ref_notice)

async def send_main_menu(m: Message | CallbackQuery, nick: str | None = None):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç{',' if nick else ''} <b>{html.escape(nick) if nick else m.from_user.full_name}</b>!\n"
        f"–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω <a href=\"{html.escape(GROUP_URL or '#')}\">Slovekizna</a>.\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    photo = FSInputFile(MENU_IMG) if MENU_IMG.exists() else None
    if isinstance(m, CallbackQuery):
        if photo:
            await m.message.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.message.answer(text, reply_markup=kb_main())
        await m.answer()
    else:
        if photo:
            await m.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.answer(text, reply_markup=kb_main())

# ------ simple menu placeholders ------

@router.callback_query(F.data == "menu:about")
async def about_cb(c: CallbackQuery):
    await c.answer()
    await c.message.answer("–ú—ã –ø—Ä–æ–¥–∞—ë–º —É—Å–ª—É–≥–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º. –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

@router.callback_query(F.data == "menu:refs")
async def refs_cb(c: CallbackQuery):
    await c.answer()
    await c.message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–∏–Ω–∏-–∞–ø–ø (–≤–∫–ª–∞–¥–∫–∞ ¬´–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª).")

@router.callback_query(F.data == "menu:roulette")
async def roulette_cb(c: CallbackQuery):
    await c.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
