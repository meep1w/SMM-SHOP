# -*- coding: utf-8 -*-
import html
import httpx
from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, WebAppInfo,
)

from bot.config import (
    API_BASE, WEBAPP_URL, GROUP_URL, PUBLIC_CHAT_URL, SCHOOL_URL, REVIEWS_URL,
    WELCOME_IMG, MENU_IMG,
)
from .registration import *  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–æ –≥–ª–∞–≤–Ω–æ–µ ‚Äî import send_main_menu –Ω–∏–∂–µ
from .start import send_main_menu as _send_main_menu  # –µ—Å–ª–∏ —É —Ç–µ–±—è –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ ‚Äî –ø–æ–ø—Ä–∞–≤—å –∏–º–ø–æ—Ä—Ç
# –ï—Å–ª–∏ send_main_menu –≤ —ç—Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ ‚Äî –æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–∏–∂–µ —è –µ–≥–æ —Ç–æ–∂–µ –¥–∞—é.

router = Router()
_http = httpx.AsyncClient(timeout=15.0)

def kb_welcome() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg:start")]
    ])

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))],
        [
            InlineKeyboardButton(text="üë• –†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞", callback_data="menu:refs"),
            InlineKeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞",     callback_data="menu:roulette"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="menu:about"),
            InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã",     url=REVIEWS_URL or PUBLIC_CHAT_URL or GROUP_URL),
        ],
    ])

async def api_get_user(user_id: int):
    """–í–µ—Ä–Ω—ë—Ç dict –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ None (404)."""
    try:
        r = await _http.get(f"{API_BASE}/user", params={"user_id": user_id, "autocreate": 0})
        if r.status_code == 200:
            return r.json()
    except Exception:
        pass
    return None

async def bind_if_ref_code(user_id: int, payload: str) -> bool:
    """–¢–∏—Ö–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ-–∫–æ–¥, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ /start ref_xxx."""
    if not payload or not payload.startswith("ref_"):
        return False
    code = payload[4:].strip().lower()
    if not code:
        return False
    try:
        r = await _http.post(f"{API_BASE}/referrals/bind", json={"user_id": user_id, "code": code})
        # 200 ‚Äî –ø—Ä–∏–≤—è–∑–∞–ª–∏, 409 ‚Äî —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –∏–¥—ë–º –¥–∞–ª—å—à–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        return r.status_code in (200, 409)
    except Exception:
        return False

@router.message(CommandStart())
async def start_cmd(m: Message):
    uid = m.from_user.id
    payload = (m.text.split(" ", 1)[1] if m.text and " " in m.text else "")

    # 1) –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥ —Ç–∏—Ö–æ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    await bind_if_ref_code(uid, payload)

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è
    u = await api_get_user(uid)

    # 3) –ï—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –ò–õ–ò —É –Ω–µ–≥–æ –Ω–µ—Ç –Ω–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if (u is None) or (not u.get("nick")):
        caption = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "
            f"<a href=\"{html.escape(GROUP_URL or PUBLIC_CHAT_URL or '#')}\">Slovekiza</a>!</b>\n\n"
            "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
            f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
            f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
        )
        photo = FSInputFile(WELCOME_IMG) if WELCOME_IMG.exists() else None
        if photo:
            await m.answer_photo(photo, caption=caption, reply_markup=kb_welcome())
        else:
            await m.answer(caption, reply_markup=kb_welcome())
        return

    # 4) –ò–Ω–∞—á–µ —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await send_main_menu(m)

# –ï—Å–ª–∏ —É —Ç–µ–±—è send_main_menu –Ω–µ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –∏–º–ø–æ—Ä—Ç –≤—ã—à–µ –∏ —É–¥–∞–ª–∏ —ç—Ç–æ.
async def send_main_menu(m: Message | CallbackQuery, nick: str | None = None):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç{',' if nick else ''} <b>{html.escape(nick) if nick else m.from_user.full_name}</b>!\n"
        f"–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω <a href=\"{html.escape(GROUP_URL or '#')}\">Slovekizna</a>.\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    photo = FSInputFile(MENU_IMG) if MENU_IMG.exists() else None
    if isinstance(m, CallbackQuery):
        if photo:
            await m.message.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.message.answer(text, reply_markup=kb_main())
        await m.answer()
    else:
        if photo:
            await m.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.answer(text, reply_markup=kb_main())
