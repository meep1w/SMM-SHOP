# -*- coding: utf-8 -*-
import html
from typing import Optional

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, CallbackQuery, WebAppInfo
)
import httpx

from bot.config import (
    API_BASE,
    WEBAPP_URL,
    GROUP_URL,
    PUBLIC_CHAT_URL,
    SCHOOL_URL,
    REVIEWS_URL,
    WELCOME_IMG,
    MENU_IMG,
)

router = Router()
_http = httpx.AsyncClient(timeout=15.0)

# ---------------- UI ----------------

def kb_welcome() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg:start")]
    ])

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))],
        [
            InlineKeyboardButton(text="üë• –†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞", callback_data="menu:refs"),
            InlineKeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞",     callback_data="menu:roulette"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="menu:about"),
            InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã",     url=REVIEWS_URL or PUBLIC_CHAT_URL or GROUP_URL),
        ],
    ])

# ---------------- API helpers ----------------

async def api_get_user(user_id: int) -> Optional[dict]:
    """–í–µ—Ä–Ω—ë—Ç –ø—Ä–æ—Ñ–∏–ª—å –ë–ï–ó –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ None, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    try:
        r = await _http.get(f"{API_BASE}/user", params={"user_id": user_id, "autocreate": 0})
        if r.status_code == 200:
            return r.json()
    except Exception:
        pass
    return None

def extract_start_payload(text: Optional[str]) -> str:
    if not text:
        return ""
    parts = text.split(maxsplit=1)
    return (parts[1] or "").strip() if len(parts) > 1 else ""

def try_extract_ref_code(payload: str) -> Optional[str]:
    if not payload:
        return None
    p = payload.strip().lower()
    if not p.startswith("ref_"):
        return None
    code = p[4:].strip()
    import re
    code = re.sub(r"[^a-z0-9_-]", "", code)
    return code or None

async def bind_ref_silently(user_id: int, code: str) -> None:
    """–¢–∏—Ö–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ —Ä–µ—Ñ-–∫–æ–¥–∞: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∏–∫–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        await _http.post(f"{API_BASE}/referrals/bind", json={"user_id": user_id, "code": code})
    except Exception:
        pass

# ---------------- Handlers ----------------

@router.message(CommandStart())
async def start_cmd(m: Message):
    uid = m.from_user.id

    # 1) –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ –¥–∏–ø–ª–∏–Ω–∫—É /start ref_xxx ‚Äî –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–¥ –¢–ò–•–û
    payload = extract_start_payload(m.text)
    code = try_extract_ref_code(payload)
    if code:
        await bind_ref_silently(uid, code)

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –±–µ–∑ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è
    u = api_get_user.__wrapped__  # silence linter in some editors
    u = await api_get_user(uid)

    # 3) –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –ò–õ–ò –Ω–∏–∫ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if (u is None) or not u.get("nick"):
        caption = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "
            f"<a href=\"{html.escape(GROUP_URL or PUBLIC_CHAT_URL or '#')}\">Slovekiza</a>!</b>\n\n"
            "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
            f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
            f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
        )
        photo = FSInputFile(WELCOME_IMG) if WELCOME_IMG.exists() else None
        if photo:
            await m.answer_photo(photo, caption=caption, reply_markup=kb_welcome())
        else:
            await m.answer(caption, reply_markup=kb_welcome())
        return

    # 4) –ò–Ω–∞—á–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ —Ä–µ—Ñ-–∫–æ–¥)
    await send_main_menu(m)

async def send_main_menu(m: Message | CallbackQuery, nick: str | None = None):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç{',' if nick else ''} <b>{html.escape(nick) if nick else m.from_user.full_name}</b>!\n"
        f"–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω <a href=\"{html.escape(GROUP_URL or '#')}\">Slovekizna</a>.\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    photo = FSInputFile(MENU_IMG) if MENU_IMG.exists() else None
    if isinstance(m, CallbackQuery):
        if photo:
            await m.message.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.message.answer(text, reply_markup=kb_main())
        await m.answer()
    else:
        if photo:
            await m.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.answer(text, reply_markup=kb_main())

# ------ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –º–µ–Ω—é ------

from aiogram import F as _F  # –µ—Å–ª–∏ —É–∂–µ –±—ã–ª –∏–º–ø–æ—Ä—Ç F ‚Äî –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ã–ª–æ
@router.callback_query(_F.data == "menu:about")
async def about_cb(c: CallbackQuery):
    await c.answer()
    await c.message.answer("–ú—ã –ø—Ä–æ–¥–∞—ë–º —É—Å–ª—É–≥–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º. –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

@router.callback_query(_F.data == "menu:refs")
async def refs_cb(c: CallbackQuery):
    await c.answer()
    await c.message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–∏–Ω–∏-–∞–ø–ø (–≤–∫–ª–∞–¥–∫–∞ ¬´–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª).")

@router.callback_query(_F.data == "menu:roulette")
async def roulette_cb(c: CallbackQuery):
    await c.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
