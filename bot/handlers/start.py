# -*- coding: utf-8 -*-
import html
import random
import string
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile, CallbackQuery, WebAppInfo

from bot.config import (
    API_BASE,
    WEBAPP_URL,
    GROUP_URL,
    PUBLIC_CHAT_URL,
    SCHOOL_URL,
    REVIEWS_URL,
    WELCOME_IMG,
    MENU_IMG,
)
import httpx

router = Router()
_http = httpx.AsyncClient(timeout=15.0)

def kb_welcome() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="reg:start")]
    ])

def kb_main() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõç –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url=WEBAPP_URL))],
        [
            InlineKeyboardButton(text="üë• –†–µ—Ñ —Å–∏—Å—Ç–µ–º–∞", callback_data="menu:refs"),
            InlineKeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞",     callback_data="menu:roulette"),
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data="menu:about"),
            InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã",     url=REVIEWS_URL or PUBLIC_CHAT_URL or GROUP_URL),
        ],
    ])

async def api_user_exists(user_id: int) -> bool:
    try:
        r = await _http.get(f"{API_BASE}/user/exists", params={"user_id": user_id})
        return bool(r.json().get("exists"))
    except Exception:
        # –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return True

@router.message(CommandStart())
async def start_cmd(m: Message):
    uid = m.from_user.id

    exists = await api_user_exists(uid)
    if not exists:
        # –ø–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        caption = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "
            f"<a href=\"{html.escape(GROUP_URL or PUBLIC_CHAT_URL or '#')}\">Slovekiza</a>!</b>\n\n"
            "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
            f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
            f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
        )
        photo = FSInputFile(WELCOME_IMG) if WELCOME_IMG.exists() else None
        if photo:
            await m.answer_photo(photo, caption=caption, reply_markup=kb_welcome())
        else:
            await m.answer(caption, reply_markup=kb_welcome())
        return

    # —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await send_main_menu(m)

async def send_main_menu(m: Message | CallbackQuery, nick: str | None = None):
    text = (
        f"–ü—Ä–∏–≤–µ—Ç{',' if nick else ''} <b>{html.escape(nick) if nick else m.from_user.full_name}</b>!\n"
        f"–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω <a href=\"{html.escape(GROUP_URL or '#')}\">Slovekizna</a>.\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{html.escape(PUBLIC_CHAT_URL or GROUP_URL or '#')}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{html.escape(SCHOOL_URL or '#')}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    photo = FSInputFile(MENU_IMG) if MENU_IMG.exists() else None
    if isinstance(m, CallbackQuery):
        if photo:
            await m.message.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.message.answer(text, reply_markup=kb_main())
        await m.answer()
    else:
        if photo:
            await m.answer_photo(photo, caption=text, reply_markup=kb_main())
        else:
            await m.answer(text, reply_markup=kb_main())

# –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é (–∑–∞–≥–ª—É—à–∫–∏)
@router.callback_query(F.data == "menu:about")
async def about_cb(c: CallbackQuery):
    await c.answer()
    await c.message.answer("–ú—ã –ø—Ä–æ–¥–∞—ë–º —É—Å–ª—É–≥–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º. –í–æ–ø—Ä–æ—Å—ã ‚Äî –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")

@router.callback_query(F.data == "menu:refs")
async def refs_cb(c: CallbackQuery):
    await c.answer()
    await c.message.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.")

@router.callback_query(F.data == "menu:roulette")
async def roulette_cb(c: CallbackQuery):
    await c.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
