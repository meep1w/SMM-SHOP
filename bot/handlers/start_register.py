# -*- coding: utf-8 -*-
import html
import random
import re
from pathlib import Path

import httpx
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile

from bot.config import (
    API_BASE,
    GROUP_URL,
    PUBLIC_CHAT_URL,
    SCHOOL_URL,
)
from bot.keyboards.inline import (
    kb_register, kb_ask_nick, kb_gen_choice, kb_main_menu,
)
from bot.states.registration import RegStates

router = Router()
_http = httpx.AsyncClient(timeout=20.0)

WELCOME_IMG = Path("bot/assets/welcome.jpg")
MENU_IMG = Path("bot/assets/menu.jpg")


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ ----------
def nice(text: str) -> str:
    return text.replace("_", r"\_")  # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ —Ä–µ—à–∏—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown

NICK_RX = re.compile(r"^[A-Za-z0-9_]{3,20}$")


def make_random_nick() -> str:
    left = ["Zen", "Neo", "Nova", "Sky", "Flux", "Byte", "Dark", "Lite", "Vex", "Kiza"]
    right = ["Fox", "Wolf", "Rider", "Scout", "Ops", "Edge", "Dash", "Core", "Flow", "Jet"]
    nick = f"{random.choice(left)}{random.choice(right)}{random.randint(10, 999)}"
    return nick[:20]


async def api_get_user(tg_id: int) -> dict:
    r = await _http.get(f"{API_BASE}/user", params={"user_id": tg_id, "consume_topup": 0})
    r.raise_for_status()
    return r.json()


async def api_try_set_nick(tg_id: int, nick: str) -> dict:
    # –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å, –µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
    r = await _http.get(f"{API_BASE}/user", params={"user_id": tg_id, "nick": nick})
    if r.status_code == 409:
        # –Ω–∏–∫ –∑–∞–Ω—è—Ç/–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        return {"ok": False, "reason": "taken"}
    r.raise_for_status()
    return {"ok": True, "data": r.json()}


# ---------- –≠–∫—Ä–∞–Ω –º–µ–Ω—é ----------
async def send_main_menu(message: Message, nick: str) -> None:
    caption = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{html.escape(nick)}</b>!\n"
        f"–≠—Ç–æ –º–∞–≥–∞–∑–∏–Ω <a href=\"{GROUP_URL}\">Slovekizna</a>.\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{PUBLIC_CHAT_URL}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{SCHOOL_URL}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    if MENU_IMG.exists():
        await message.answer_photo(
            photo=FSInputFile(MENU_IMG),
            caption=caption,
            parse_mode="HTML",
            reply_markup=kb_main_menu(),
        )
    else:
        await message.answer(caption, parse_mode="HTML", reply_markup=kb_main_menu())


# ---------- /start ----------
@router.message(CommandStart())
async def on_start(message: Message, state: FSMContext):
    await state.clear()
    data = await api_get_user(message.from_user.id)
    # –ï—Å–ª–∏ –Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å ‚Üí —Å—Ä–∞–∑—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data.get("nick"):
        await send_main_menu(message, data["nick"])
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    caption = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "
        f"<a href=\"{GROUP_URL}\">Slovekinza</a>!</b>\n\n"
        "–ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —Å–æ—Ü.—Å–µ—Ç–∏, –∫–∞–Ω–∞–ª—ã –∏ –≤–æ—Ä–æ–Ω–∫–∏ –ø–æ –ª—É—á—à–∏–º —Ü–µ–Ω–∞–º ‚Äî –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n\n"
        f"–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π <a href=\"{PUBLIC_CHAT_URL}\">–æ—Ç–∫—Ä—ã—Ç—ã–π —á–∞—Ç</a> "
        f"–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–µ–π <a href=\"{SCHOOL_URL}\">—à–∫–æ–ª–æ–π —Ç—Ä–∞—Ñ—Ñ–∏–∫–∞</a>."
    )
    if WELCOME_IMG.exists():
        await message.answer_photo(
            photo=FSInputFile(WELCOME_IMG),
            caption=caption,
            parse_mode="HTML",
            reply_markup=kb_register(),
        )
    else:
        await message.answer(caption, parse_mode="HTML", reply_markup=kb_register())


# ---------- –ö–Ω–æ–ø–∫–∞ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª ----------
@router.callback_query(F.data == "reg:start")
async def cb_reg_start(cq: CallbackQuery, state: FSMContext):
    user = await api_get_user(cq.from_user.id)
    if user.get("nick"):
        # –∑–∞—â–∏—Ç–∞ ‚Äî —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await cq.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    text = (
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å <b>—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º</b>.\n"
        "–ï–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å.\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ–º <u>–∏–ª–∏</u> –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª."
    )
    await cq.message.answer(text, parse_mode="HTML", reply_markup=kb_ask_nick())
    await state.set_state(RegStates.waiting_nick)
    await cq.answer()


# ---------- –°–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –Ω–∏–∫–∞ ----------
@router.message(RegStates.waiting_nick)
async def on_nick_typed(message: Message, state: FSMContext):
    raw = (message.text or "").strip()
    if not NICK_RX.fullmatch(raw):
        await message.answer("–ù–∏–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å A‚ÄìZ, a‚Äìz, 0‚Äì9 –∏ _; –¥–ª–∏–Ω–∞ –æ—Ç 3 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    # –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∏–∫ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
    res = await api_try_set_nick(message.from_user.id, raw)
    if not res["ok"]:
        await message.answer("–¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ.")
        return

    await state.clear()
    await send_main_menu(message, raw)


# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∏–∫–∞ ----------
@router.callback_query(F.data == "reg:gen")
async def cb_reg_gen(cq: CallbackQuery, state: FSMContext):
    user = await api_get_user(cq.from_user.id)
    if user.get("nick"):
        await cq.answer("–ù–∏–∫ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω –∑–∞ –≤–∞–º–∏.", show_alert=True)
        return

    nick = make_random_nick()
    text = f"–í–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∫–∞: <code>{html.escape(nick)}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await cq.message.answer(text, parse_mode="HTML", reply_markup=kb_gen_choice(nick))
    await state.set_state(RegStates.waiting_nick)
    await cq.answer()


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
@router.callback_query(F.data.startswith("reguse:"))
async def cb_reg_use(cq: CallbackQuery, state: FSMContext):
    user = await api_get_user(cq.from_user.id)
    if user.get("nick"):
        await cq.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
        return

    nick = cq.data.split(":", 1)[1].strip()
    if not NICK_RX.fullmatch(nick):
        await cq.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫.", show_alert=True)
        return

    res = await api_try_set_nick(cq.from_user.id, nick)
    if not res["ok"]:
        await cq.answer("–ù–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–î–∞–ª—å—à–µ¬ª, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π.", show_alert=True)
        return

    await state.clear()
    await cq.message.answer("–ì–æ—Ç–æ–≤–æ! –ù–∏–∫ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω.")
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    fake_msg = cq.message  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await send_main_menu(fake_msg, nick)
    await cq.answer()


# –û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
@router.callback_query(F.data == "reg:cancel")
async def cb_reg_cancel(cq: CallbackQuery, state: FSMContext):
    await cq.answer()
    await cq.message.answer(
        "–•–æ—Ä–æ—à–æ üôÇ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫¬ª.",
        reply_markup=kb_ask_nick()
    )
    await state.set_state(RegStates.waiting_nick)


# ---------- –ü—É–Ω–∫—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ----------
@router.callback_query(F.data == "menu:ref")
async def cb_menu_ref(cq: CallbackQuery):
    await cq.answer()
    txt = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –æ—Ç –∏—Ö –ø–æ–∫—É–ø–æ–∫.\n"
        "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–†–µ—Ñ–µ—Ä–∞–ª—ã¬ª."
    )
    await cq.message.answer(txt, parse_mode="HTML")


@router.callback_query(F.data == "menu:about")
async def cb_menu_about(cq: CallbackQuery):
    await cq.answer()
    txt = (
        "‚ÑπÔ∏è <b>–û –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n"
        "Slovekinza ‚Äî –≤–∏—Ç—Ä–∏–Ω–∞ —É—Å–ª—É–≥ SMM. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–∞–∑—ã, —á–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã, –ø–æ–¥–¥–µ—Ä–∂–∫–∞."
    )
    await cq.message.answer(txt, parse_mode="HTML")
